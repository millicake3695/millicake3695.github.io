(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{550:function(e,t,s){"use strict";s.r(t);var a=s(2),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.babeljs.cn/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Babel 是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。")]),e._v(" "),t("p",[e._v("主要功能：")]),e._v(" "),t("ol",[t("li",[e._v("语法转换")]),e._v(" "),t("li",[e._v("通过 Polyfill 方式在目标环境中添加缺失的特性 （通过引入第三方 polyfill 模块，例如 core-js）")]),e._v(" "),t("li",[e._v("源码转换")]),e._v(" "),t("li",[e._v("...")])]),e._v(" "),t("h3",{attrs:{id:"babel-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-core"}},[e._v("#")]),e._v(" @babel/core")]),e._v(" "),t("p",[e._v("Babel 的核心功能包含在 @babel/core 模块中。")]),e._v(" "),t("h3",{attrs:{id:"babel-preset-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-preset-env"}},[e._v("#")]),e._v(" @babel/preset-env")]),e._v(" "),t("p",[e._v("如果不进行任何配置，该预设所包含的插件将支持所有最新的 JavaScript （ES2015、ES2016 等）特性。")]),e._v(" "),t("p",[e._v("preset-env "),t("code",[e._v("useBuiltIns")]),e._v(" 设置为 "),t("code",[e._v("usage")]),e._v(" 将自动对我们所使用的并且目标浏览器中缺失的功能进行代码转换和加载 polyfill (无需显示引入 @babel/polyfill)。")]),e._v(" "),t("p",[e._v("否则的话，必须在所有代码之前(entry point)利用 require 加载一次完整的 polyfill:")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// As of Babel 7.4.0, @babel/polyfill has been deprecated in favor of directly including core-js/stable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// (to polyfill ECMAScript features):")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"core-js/stable"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h3",{attrs:{id:"babel-polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-polyfill"}},[e._v("#")]),e._v(" @babel/polyfill")]),e._v(" "),t("p",[e._v("包含 core-js 和一个自定义的 regenerator runtime 来模拟完整的 ES2015+ 环境。")]),e._v(" "),t("p",[e._v("缺点：对全局范围（global scope）造成污染")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"title"}),t("p",[e._v("注意，使用 "),t("code",[e._v("--save")]),e._v(" 参数安装而不是 "),t("code",[e._v("--save-dev")]),e._v("，因为这是一个需要在源码之前运行的 polyfill。")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[e._v("With webpack, there are multiple ways to include the polyfills:")]),e._v(" "),t("p",[e._v("When used alongside @babel/preset-env,")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("If "),t("code",[e._v("useBuiltIns: 'usage'")]),e._v(" is specified in "),t("code",[e._v(".babelrc")]),e._v(" then do not include "),t("code",[e._v("@babel/polyfill")]),e._v(" in either "),t("code",[e._v("webpack.config.js")]),e._v(" entry array nor source. Note, "),t("code",[e._v("@babel/polyfill")]),e._v(" still needs to be installed.")])]),e._v(" "),t("li",[t("p",[e._v("If "),t("code",[e._v("useBuiltIns: 'entry'")]),e._v(" is specified in "),t("code",[e._v(".babelrc")]),e._v(" then include "),t("code",[e._v("@babel/polyfill")]),e._v(" at the top of the "),t("strong",[e._v("entry point")]),e._v(" to your application via "),t("code",[e._v("require")]),e._v(" or "),t("code",[e._v("import")]),e._v(" as discussed above.")])]),e._v(" "),t("li",[t("p",[e._v("If "),t("code",[e._v("useBuiltIns")]),e._v(" key is not specified or it is explicitly set with "),t("code",[e._v("useBuiltIns: false")]),e._v(" in your "),t("code",[e._v(".babelrc")]),e._v(", add "),t("code",[e._v("@babel/polyfill")]),e._v(" directly to the entry array in your "),t("code",[e._v("webpack.config.js")]),e._v(".")])])]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("entry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"@babel/polyfill"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./app/js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("If "),t("code",[e._v("@babel/preset-env")]),e._v(" is not used then add "),t("code",[e._v("@babel/polyfill")]),e._v(" to webpack entry array as discussed above. It can still be added at the top of the entry point to application via import or require, but "),t("strong",[e._v("this is not recommended")]),e._v(".")])]),t("h3",{attrs:{id:"babel-plugin-transform-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-plugin-transform-runtime"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.babeljs.cn/docs/babel-plugin-transform-runtime",target:"_blank",rel:"noopener noreferrer"}},[e._v("@babel/plugin-transform-runtime"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("把注入的代码和 core-js 全局引入的代码转换成从 @babel/runtime-corejs3 中引入的形式，解决 corejs 的重复注入和全局引入 polyfill 的两个问题。")]),e._v(" "),t("p",[e._v("babel 插件和 preset 生效的顺序：先插件后 preset，插件从左往右，preset 从右往左。")]),e._v(" "),t("p",[e._v("新问题：通过 @babel/plugin-transform-runtime 提前把 polyfill 转换了，但是这个插件里没有按需转换的设置项 - targets，那就会多做一些没必要的转换。")]),e._v(" "),t("p",[e._v("总结：")]),e._v(" "),t("p",[e._v("babel7 以后，只需要使用 "),t("code",[e._v("@babel/preset-env")]),e._v(" 指定目标环境的 "),t("code",[e._v("targets")]),e._v("，babel 就会根据内部的兼容性数据库查询出该环境不支持的语法和 api，进行对应插件的引入，从而实现按需的语法转换和 polyfill 引入。")]),e._v(" "),t("p",[e._v("但是 "),t("code",[e._v("@babel/preset-env")]),e._v(" 转换用到的一些辅助代码（helper）是直接注入到模块里的，没有做抽离，多个模块可能会重复注入。并且用到的 polyfill 代码也是全局引入的，可能污染全局环境。为了解决这两个问题，可以使用 "),t("code",[e._v("@babel/plugin-transform-runtime")]),e._v(" 插件来把注入的代码抽离，把全局的引入改为从 "),t("code",[e._v("@babel/runtime-corejs3")]),e._v(" 引入的方式。")]),e._v(" "),t("p",[e._v("runtime 包包含 "),t("code",[e._v("core-js")]),e._v("、"),t("code",[e._v("regenerator")]),e._v("、"),t("code",[e._v("helper")]),e._v(" 三部分。")]),e._v(" "),t("p",[t("code",[e._v("@babel/plugin-transform-runtime")]),e._v(" 能生效的原理是因为插件先于 preset 被调用，提前把那些 api 做了转换，并且设置了 preset-env 生成 helper 的方式。")]),e._v(" "),t("p",[e._v("但是这个转换和 preset-env 是独立的，它没有 targets 的配置，这就导致了不能按需 polyfill，会进行一些不必要的转换。这个是已知的 issue，等 babel 版本更新 fix。")])])}),[],!1,null,null,null);t.default=r.exports}}]);